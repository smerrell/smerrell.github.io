<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Sam Merrell]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://smerrell.github.io/"/>
  <updated>2016-01-02T19:11:15.000Z</updated>
  <id>http://smerrell.github.io/</id>
  
  <author>
    <name><![CDATA[Sam Merrell]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Using qDslrDashboard with the Sony a6000]]></title>
    <link href="http://smerrell.github.io/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/"/>
    <id>http://smerrell.github.io/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/</id>
    <published>2016-01-02T19:11:15.000Z</published>
    <updated>2016-01-02T19:11:15.000Z</updated>
    <content type="html"><![CDATA[<p>Most of my posts are going to be something technology related but I <em>do</em> happen
to have other interests. For a while now, I’ve had a Sony a6000 that I’ve been
very happy with. I’m very much an amateur at photography but I find it fun and I
like the images I get of my family more than the ones I can get from my iPhone.
So I’ve been slowly trying to level up my photography skills. I’m definitely not
over 9000 yet, but maybe one day I’ll get there.</p>
<p>This Christmas, I finally got a tripod and it has gotten me interested in trying
to do some time lapse photography. Sony has a time lapse app but I wanted to see
what other options were out there. After a bit of Googling, I came across
<a href="http://dslrdashboard.info" target="_blank" rel="external">DslrDashboard</a>. Confusingly, the apps have been
renamed to qDslrDashboard, but there is an app for just about every platform.</p>
<p>Since I own two iDevices, I went ahead and threw down the $10 it cost for the
iOS app. At first, I was hoping to find a free option to do time lapse, but I
definitely feel better giving a developer my ten dollars instead of just throwing
it at Sony. Since I didn’t have my iPad right on hand, I started trying things
out with my iPhone. It took me a while to figure out how to get the app to work
with my phone, and honestly, I’m still not 100% sure how to get the thing to
work consistently every time. Here’s what it took me to get my camera and my
iPhone running the qDslrDashboard app running.</p>
<ul>
<li>Go to <a href="https://www.playmemoriescameraapps.com/portal/" target="_blank" rel="external">https://www.playmemoriescameraapps.com/portal/</a></li>
<li>Create an account (PlayStation Network account, ugh.)</li>
<li>Go to <code>Menu -&gt; Applications</code><img src="/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/application-list.jpg" alt="application list on the a6000" title="application list on the a6000"></li>
<li>Select <code>PlayMemories Camera Apps</code><img src="/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/playmemories-camera-apps.jpg" alt="application select PlayMemories
    Camera Apps on the a6000" title="application select PlayMemories
    Camera Apps on the a6000"></li>
<li>Find Smart Remote Control app</li>
<li>Install it</li>
</ul>
<p>I still feel pretty gross about having to create a PlayStation Network account,
but there you go, all the steps to get the Smart Remote Control updated.</p>
<h2 id="Getting_qDslrDashboard_and_the_a6000_working_together">Getting qDslrDashboard and the a6000 working together</h2><p>To get the a6000 to be controlled remotely, you have to open the Smart Remote
Control application. This is as simple as going from <code>Meny -&gt; Applications -&gt;
Application List -&gt; Smart Remote Control</code>. Once you open the Smart Remote
Control app, the a6000 will create a WiFi network. Simply connect your device to
that network using the SSID and Password from the screen and the camera will
start in remote control mode.</p>
<p>This is where it gets a little odd with the qDslrDashboard app.</p>
<img src="/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/sony-wireless-connection.jpg" alt="Tap the button until it works" title="Tap the button until it works">
<p>The first tap of the Sony Wireless button has not worked for me, I often have to
press multiple times until it works. A little weird, but it does eventually
work!</p>
<p>Once you’ve tapped the Sony wireless connection button enough times, you’ll be
greeted with this screen of buttons. I don’t know for sure if qDslrDashboard
defaults to using a live view, but if it does you’ll see what the camera is
seeing as well. Otherwise you can tap the little <code>Lv</code> button in the top left
corner.</p>
<p>To get to the time lapse portion, you need to tap the time lapse button on the
right.</p>
<img src="/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/time-lapse.jpg" alt="the time lapse button" title="the time lapse button">
<p>The time lapse screen has a whole bunch of options to choose from. In the image
below, I captured a sample, it then displays a bunch of information about the
image you took to help you figure out what settings you’ll need to make the time
lapse. I don’t know what much of that means, but one day I will!</p>
<img src="/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/time-lapse-screen.jpg" alt="the time lapse screen" title="the time lapse screen">
<p>At the most basic level, you really just need to scroll down and click the
stopwatch icon. The stopwatch icon will let you configure the interval timer
which is the heart of doing the time lapse.</p>
<img src="/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/interval-timer.jpg" alt="the time lapse interval timer screen" title="the time lapse interval timer screen">
<p>Setting the interval timer is pretty simple, but you do have to think a little
bit about it. When I first set it up, I wasn’t really reading what the screen
was trying to tell me. I set a frame count and then set the interval to 20
minutes. In my mind it was going to take pictures until the 20 minutes ran out.
When nothing happened for a minute or two, I realized my mistake.</p>
<img src="/2016/01/02/Using-qDslrDashboard-with-the-Sony-A6000/interval-timer-setup.jpg" alt="the time lapse interval timer setup" title="the time lapse interval timer setup">
<p>If you want to have a time lapse go for a specific amount of time, you need to
factor in two things. The interval, which is how long to wait between shots, and
the frame count. The frame count is exactly what it sounds like, the number of
frames to capture. So, if I wanted to shoot for an hour and I was taking a frame
every second, I need to work backwards to get the number of frames.</p>
<p>If I have an interval of 5 seconds, it is going to look something like this:</p>
<blockquote>
<p>(60 seconds / a frame every 5 seconds) * 60 minutes = 720 frames</p>
</blockquote>
<p>So to capture an hour of time at 1 frame every 5 seconds, I need 720 frames
total. This will capture an hours worth of time, I do wish qDslrDashboard had a
way to say how long to capture as well, but it isn’t too difficult to figure out
on my own.</p>
<p>After that you simply press start and the camera will start taking pictures at
the interval. Easy! So how about after you’ve taken the pictures? Well, after
some Googling and playing around I’ve found two different ways to use the
time lapse. One is by making a gif and the other making a movie.</p>
<h2 id="Resizing_the_images">Resizing the images</h2><p>Since the a6000 takes 24 megapixel (roughly 6000x4000), I resize the images
first. This is where ImageMagick comes in handy. The script below will find all
the images and use ImageMagick’s <code>mogrify</code> command to resize the images in
place.</p>
<figure class="highlight bash"><figcaption><span>resize</span><a href="http://dlo.me/archives/2015/07/26/making-a-time-lapse-using-ffmpeg-and-imagemagick/" target="_blank" rel="external">I got this from this great post</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> *.jpg <span class="keyword">do</span>;</span><br><span class="line">  mogrify -resize <span class="number">3840</span>x2160^ -gravity center -crop <span class="number">3840</span>x2160+<span class="number">0</span>+<span class="number">0</span> +repage <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> This script resizes images in place, I do this because I export the
pictures from Apple Photos. If you don’t want to resize the actual image, you
can add <code>-write resized/$file</code> before the last <code>$file</code>. This will write out all
the images to a <code>resized</code> folder.</p>
<p>Depending on how you want the images cropped, you might want to play with the
<code>-gravity</code> setting. This script will crop all the images directly in the center
of the image. The <code>3840x2160^</code> resizes the image to a 4k resolution but will
preserve the smaller of the width or height.</p>
<p>I’ve played around with resizing images with ImageMagick before, but the credit
for this script goes to Dan Loewenherz’s great blog post <a href="http://dlo.me/archives/2015/07/26/making-a-time-lapse-using-ffmpeg-and-imagemagick/" target="_blank" rel="external">Making a time-lapse on
the command line using FFmpeg and
ImageMagick</a>.
There are many great tips from his post, so you should go read it.</p>
<h2 id="Turning_the_images_into_a_gif">Turning the images into a gif</h2><p>If your time lapse is pretty short, you can convert to an animated gif quite
easily using ImageMagick. The command looks something like:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert *.jpg -set delay <span class="number">1</span> my-time-lapse.gif</span><br></pre></td></tr></table></figure>
<p>This is the most basic way to create an animated gif from a series of images.
This only works if the Jpeg files are ordered. You can play around with the
<code>-delay</code> time and see how it turns out. ImageMagick also has a million other
things you can do so take a look at the
<a href="http://www.imagemagick.org/script/command-line-options.php" target="_blank" rel="external">docs</a>.</p>
<h2 id="Turning_the_images_into_a_movie">Turning the images into a movie</h2><p>Once you have the images resized how you want them, converting to a movie using
ffmpeg is pretty simple.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -framerate &lt;some number&gt; -start_number <span class="number">1</span> -i image%<span class="number">04</span>d.jpg -c:v libx264 -pix_fmt yuv420p &lt;filename&gt;.mp4</span><br></pre></td></tr></table></figure>
<p>This command will take the series of images and put them together into an MP4
video file. The <code>-c:v libx264</code> command tells ffmpeg to encode the video using
the <code>libx264</code> codec. This will encode it as an h264 video. The <code>-pix_fmt</code> option
sets the pixel format of the video. This is the color format of the video, video
players will use it to know how to display the video properly.</p>
<p>And with that, you will have the final product! Ffmpeg has a ton of option and
is a very powerful tool, I’m certain I will have more to write about using
ffmpeg to convert or create videos.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Most of my posts are going to be something technology related but I <em>do</em> happen
to have other interests. For a while now, I’ve had]]>
    </summary>
    
      <category term="photography" scheme="http://smerrell.github.io/tags/photography/"/>
    
      <category term="sony-a6000" scheme="http://smerrell.github.io/tags/sony-a6000/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Learning Rust as a C# Developer]]></title>
    <link href="http://smerrell.github.io/2015/12/23/learning-rust-as-a-csharp-developer/"/>
    <id>http://smerrell.github.io/2015/12/23/learning-rust-as-a-csharp-developer/</id>
    <published>2015-12-24T00:47:29.000Z</published>
    <updated>2015-12-24T00:47:29.000Z</updated>
    <content type="html"><![CDATA[<p>Choosing a new programming language to learn is difficult. What do I want to
focus on? Do I want to learn something low level like C? Do I want to go all out
functional and learn Haskell? What about Go? Everyone seems to be glowing about
that language. Elixir? I hear Rubyists are really digging on that language, and
it is built on top of Erlang! So many choices!</p>
<p>As you’ve probably guessed from the title, I ended up picking the <a href="https://rust-lang.org" target="_blank" rel="external">Rust
programming language</a> as the language I’d like to focus
on and learn about. So lets take a little bit of time to talk about why I made
that choice.</p>
<h2 id="A_way_to_delve_into_“systems_programming”">A way to delve into “systems programming”</h2><p>“Systems programming” feels like this mythical place of expert developers
writing bare metal code to do things I can barely even understad. It is so
different from my day-to-day job that it feels almost unattainable. I’ve never
written anything in assembly, I can’t really read hex, and I’ve only barely
tried to write anything in C. It really feels like such a daunting task to get
into what seems like such a complicated topic.</p>
<p>Fortunatly, Rust really feels like an accessible language that could get me
learning about systems programming. I can learn how to manage my own memory, how
to write performant code, how to work safely with pointers and many other “low
level” bits of code. For whatever reason, Rust just feels like I can jump in and
actually do something. I haven’t felt that way with C or C++.</p>
<h2 id="A_C_replacement">A C replacement</h2><p>I swear, one day I actually am going to get around to learning C. When I do I’m
going to do it <a href="http://c.learncodethehardway.org/book/" target="_blank" rel="external">the hard way</a>. But until
I do, one of the reasons I picked Rust is that it is explicitly aimed at
replacing C and C++ as the programming language of choice for prople writing
performance critical or low level code. I’ve started and quickly stopped
learning C and I haven’t found the motivation yet to stick with it and really
learn the language. I’m sure I will eventually, but I think the barrier to entry
has still been too high for me.</p>
<p>With Rust, I have been able to get going pretty quickly in the language and
start to learn bits and pieces about Rust while doing interesting things. I’m
sure I could also do this with C, but so far I just haven’t had the willpower to
stick with it. Rust, on the other hand, has kept me very interested and very
motivated to learn the language.</p>
<h2 id="No_GC">No GC</h2><p>Another specific reason I chose Rust was that I wanted to try out a language
that does no garbage collection for me. Throughout my career as a developer I’ve
worked in a garbage collected language, and honestly it is pretty awesome most
of the time. But, since it is the only thing I’ve used before and I want to
learn lower level programming skills, I have to learn how to walk away from
garbage collection and learn how to manage memory myself.</p>
<h2 id="Modern_language_features">Modern language features</h2><p>As a final deciding factor, the language features that Rust provides are very
compelling to me. Generics are available and I am familiar with how to use them
in C#, Traits (i.e. Interfaces for C# people), pattern matching, etc. are all
language features that feel very compelling and interesting to use.</p>
<p>So there you have it, a few of the reasons that I’ve decided to spend time
really trying to dig in and learn the Rust programming language. I have much to
learn and will likely be sporadically sharing what I’ve come across so far here
on this blog.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Choosing a new programming language to learn is difficult. What do I want to
focus on? Do I want to learn something low level like C? Do ]]>
    </summary>
    
      <category term="csharp" scheme="http://smerrell.github.io/tags/csharp/"/>
    
      <category term="rust" scheme="http://smerrell.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Agile is Hard]]></title>
    <link href="http://smerrell.github.io/2012/12/14/agile-is-hard/"/>
    <id>http://smerrell.github.io/2012/12/14/agile-is-hard/</id>
    <published>2012-12-14T23:00:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>Agile. Such a broad topic with so much to discuss and so much already discussed.
It really is one of those topics you can go on about forever. So how am I going
to put my spin on things? Well, I’m not I’m just going to talk about what I’ve
learned so far in over a year of really trying to do agile the right way and
hopefully I’ll have learned something as well as you, the reader.</p>
<h1 id="Scrum_Time">Scrum Time</h1><p>A little over a year ago we decided at work that the way we were doing things
could really use some improvement. We were using Agile Zen and its online Kanban
board but instead of embracing Kanban and continuous flow we basically were
working in a waterfall manner.</p>
<p>Fortunately for me, I got pulled onto a new team that was working on a new
product to support our call center’s onboarding of agents. Since we were on a
new team we also were tasked with really digging in and giving scrum a go. We
gathered our new team of joint QA and Dev, read a couple books, got a scrum
consultant, set up our white board and we were off estimating our stories and
slapping them up on the board.</p>
<h1 id="Two_weeks">Two weeks</h1><p>It really was great starting out. It was the first time for me to really get
more interaction with the business and learn a ton about the domain. We also had
decided to give one week iterations a try and deliver what we could within that
time frame. I was really onboard with the one week iteration idea since about a
year before that I had read Kent Beck’s <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Edition/dp/0321278658/ref=dp_ob_title_bk" target="_blank" rel="external">Extreme Programming
Explained</a>
and really felt it would help keep us on track.</p>
<p>Unfortunately for us one week iterations just felt like too much so that lasted
only a couple weeks until we decided to change our sprints to two weeks and have
more breathing room. We also had the typical growing pains of trying to figure
out how to actually estimate stories and become better with our estimations. We
also worked on keeping our discipline of writing tests first and really being
TDD focused.</p>
<p>Over the last year we feel like we’ve gotten pretty good at most of these
things, but over time I’ve noticed a few bad habits creep in and as a whole I’ve
noticed some questioning of the methods we’ve been using.</p>
<h1 id="Things_don’t_seem_quite_right">Things don’t seem quite right</h1><p>I began to notice that things with our development process didn’t seem quite
right. We had begun to fall into a trend of consistently going over our two week
iterations by a few days. We were beginning to leave QA behind and move forward
when we were “dev complete”. As I started to feel like we were doing it wrong
Jeremy Miller wrote a post about (not the book, mind you) “<a href="http://jeremydmiller.com/2012/12/13/code-complete-is-a-polite-fiction-done-done-done-is-the-hard-truth/" target="_blank" rel="external">Code Complete is
polite
fiction</a>“.</p>
<p>Since Jeremy’s post better explains how I was feeling, please read that.
Basically we had fallen into the quagmire of “trailer-hitched QA” as Uncle Bob
Martin called it. Instead of staying focused and being done-done-done we were
slipping into the bad habit of saying we were done earlier in the sprint that we
really were.</p>
<h1 id="Round_two">Round two</h1><p>So recently we have decided to try and give Kanban a real try after learning so
much with our time using Scrum. One nice thing about Kanban is that it isn’t
really prescriptive. I’ve always found scrum a bit grating that way just because
you start out with a rigid set of rules you’re supposed to follow until you are
comfortable. From there, you can decide what is or isn’t working, the hardest
part there though, is uprooting all your processes to implement Scrum.</p>
<p>Moving forward I think the next couple steps we’ll be taking is to really reduce
the work in progress to a manageable level. One of the worst symptoms I see of
trailer-hitched QA is that you have a dozen or more features or bug fixes all
being worked on at a time. It gets very confusing to keep track of everything in
flight and make sure it gets out the door in good shape.</p>
<p>From just reducing our work in progress I imagine we’ll begin to see more
clearly where our processes are causing bottlenecks and work towards fixing
them. Instead of uprooting everything and starting over, we continually improve
to make the processes we have now better and more effective. Most importantly
the long term effect is we developers are happier, QA is happier, and our
business is happier with the work we’re doing. And for me, that is an all around
win.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Agile. Such a broad topic with so much to discuss and so much already discussed.
It really is one of those topics you can go on about for]]>
    </summary>
    
      <category term="agile" scheme="http://smerrell.github.io/tags/agile/"/>
    
      <category term="kanban" scheme="http://smerrell.github.io/tags/kanban/"/>
    
      <category term="retrospective" scheme="http://smerrell.github.io/tags/retrospective/"/>
    
      <category term="scrum" scheme="http://smerrell.github.io/tags/scrum/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Make Testing Easy]]></title>
    <link href="http://smerrell.github.io/2012/12/06/make-testing-easy/"/>
    <id>http://smerrell.github.io/2012/12/06/make-testing-easy/</id>
    <published>2012-12-07T06:26:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>Testing. We all know that we should do it, and yet often times we find
ourselves struggling to stay consistent in testing our code. I know that I
personally find it difficult sometimes to really stick to and test my code,
and guess what happens when you don’t test your code. It comes back to haunt
you.</p>
<p>I was discussing this with my coworker <a href="http://ryanhauert.com" target="_blank" rel="external">Ryan</a> about
this very problem, and it got me thinking I should write it down. (It also
helps he suggested it would be a possible blog post topic, so thanks Ryan).</p>
<h1 id="When_I_Test">When I Test</h1><p>At Extend Health, I’ve been working on a specific project for quite some time
now. I got the privilege to start out with a new greenfield project and have
watched it transform over the last year. When we first started out, we had to
keep our business process running by pretty much glue and duct tape to make it
through the Annual Enrollment Period. Those were rough times filled with
taking an existing Microsoft Access project and getting it to talk to SQL
server on the backend so the data was at least in one place.</p>
<p>It was rough, but interestingly we were determined to keep things tested.
Since basically all logic had to go into the DB at the time, we looked at SQL
testing frameworks. We stumbled on <a href="http://tsqlt.org/" target="_blank" rel="external">tsqlt</a> and found it
helped us quite a bit. But even with a testing framework we found it very
difficult to write tests.</p>
<p>On the next revision of our project, we got to start completely fresh and
built our system using CQRS and Event Sourcing. With a clean code base and
pretty good discipline, we were able to consistently keep our code tested and
often we wrote test first. Not always, but a good portion of the time anyway.</p>
<h1 id="Then_Things_Get_Hard">Then Things Get Hard</h1><p>After working on my last project, I got some time to add to a large project we
have based around WPF and <a href="http://caliburn.codeplex.com/" target="_blank" rel="external">Caliburn</a>. This is
when I noticed I started to throw my testing habits out the window and just
cowboy code everything. But why would I knowingly throw testing out the
window?</p>
<p>Then I sat down and thought about it. What was the main thing that I was using
to justify my lack of tests, even though I know I should be doing them? It
really came down to one thing for me, testing the code base was <em>hard</em>. Boo
hoo, right? But it really comes down to friction making tests surpassing my
will to write the test.</p>
<h1 id="Well_What_Do_We_Do_About_This?">Well What Do We Do About This?</h1><p>So what exactly do we do about this so we actually test our code? I’m going to
throw my favorite programmer answer at that one: it depends. I know, I know,
that is the lame answer but it really is true from what I can tell. Really it
just depends on if you’re working with existing code or starting out fresh.
Since it isn’t too common to just get a new, fresh codebase to start with lets
look at the existing code problem.</p>
<p>The way I see it, there really is only one way to go with an existing
solution. You can start by beefing up your test helpers to make setup as
painless as possible, and while you’re doing that you get a bonus. It helps
you identify areas in your code that are very painful to test. Once you’ve got
your test helpers automating the suck away as much as possible, you can start
to identify the most problematic code to test.</p>
<p>Perhaps you have un-mockable or difficult to mock classes? God objects being
used everywhere? Either way, once you identify the problem areas you can pick
them apart one by one and write the new code using tests, of course. Obviously
it sucks to have to do this slowly but I don’t really see another way to take
it besides griding down the painful pieces as you can.</p>
<h1 id="So_The_Moral_Of_The_Story_Is">So The Moral Of The Story Is</h1><p>You’ve got to make your code easy to test or you are going to find ways to
convince yourself you don’t need to write them. Simple I know, but it helps to
stay disciplined when the code lends itself to testing. If you have a codebase
that is really difficult to test, then it is worth the investment to make it
as easy as possible. This means you can make helpers for the tests while you
chip away at the really hard parts of the code. In the end, you’ll thank
yourself for doing it.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Testing. We all know that we should do it, and yet often times we find
ourselves struggling to stay consistent in testing our code. I kno]]>
    </summary>
    
      <category term="testing" scheme="http://smerrell.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Looking Back: Development Retrospective]]></title>
    <link href="http://smerrell.github.io/2012/12/01/looking-back-development-retrospective/"/>
    <id>http://smerrell.github.io/2012/12/01/looking-back-development-retrospective/</id>
    <published>2012-12-01T22:08:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>I’m in a bit of a retrospective mood so this post is going to be focusing on
the things I’ve learned so far in software development. And no, mostly not
specific code things I’ve learned. There will be other posts for that.</p>
<p>I’ve been out of <a href="http://neumont.edu" target="_blank" rel="external">school</a> and in the world of software
development for five years now. Over this time I’ve had the opportunity to have
many great, and many not so great experiences that I’d like to reflect on and
share. So what have I learned exactly? To do that, let’s start by looking back.</p>
<h2 id="Where_I_started_out">Where I started out</h2><p>We’ll start with my first job out of school. Seems like a logical place to
begin. I got hired on to work for IBM in Austin months before I actually
graduated from Neumont. I was super excited to work for IBM because I felt it
would be a great place to learn as a brand new developer. Originally I had been
hired on to work on their build team doing mostly Perl build scripts.</p>
<p>Interestingly enough, I got moved before I even started there. About two
months before I graduated I was informed I had been moved to the WebServices
testing team for WebSphere. I’d be doing Java and test. Cool, I thought. I
like Java and this sounds like an interesting opportunity. Over the next three
years at IBM I’d learn many great things and also struggle with some rough
patches.</p>
<p>IBM taught me many really great things and has definitely been a place I’ve
gained much experience from. I learned what it was like to work in a huge
company and met so many great people there. I also got to see great diversity
in development in terms of gender, race, religions. It was such an eye opening
experience for a new college graduate such as myself. It also changed how I
view my relationship with work and has made me more acutely aware of whether
or not I’m happy with what I’m doing.</p>
<p>Unfortunately, I was not happy with what I was doing at IBM. I didn’t feel
like I fit in well with the size and structure of the company and eventually
that showed. So, my first job ever was also the first time I went through the
experience of being laid off. It was painful for sure and bothered me because
I felt like my skills had failed me, but ultimately it has opened up new paths
and given me a valuable learning experience of when to call it quits and move
on.</p>
<p>From there I went to MediaPort and got back into actual development and using
C# for the first time since I graduated. It really was a great time and taught
me a lot about how different things are from a giant company like IBM to a
tiny company like MediaPort was. Working with my best friends was also one of
the best experiences I’ve ever had. I learned so much about development and
what all I had been missing with C#. I also saw how a small team of developers
have a direct impact on the business, a polar opposite of when I was at IBM.
It was great and I miss working with my friends. Unfortunately it just wasn’t
stable enough for me at the time with my growing family, so with my newly
acquired skills I moved to where I am now: Extend Health.</p>
<h1 id="Where_I_am">Where I am</h1><p>November was my two year anniversary at Extend Health and looking back at
those two years, I’ve grown immensely since I started out. When I first
started, I barely had started looking into ASP.NET MVC and getting into
serious web development. Now, I use <a href="http://fubu-project.org" target="_blank" rel="external">FubuMvc</a> and
have been privileged enough to become a contributor to the project.</p>
<p>It really is hard to count all the ways that I’ve grown since I’ve started at
Extend Health. I’ve been able to try out a new project using CQRS and Event
Sourcing which has been a really fun project to learn from. Along with that,
I’ve gotten to use Git full time and recently been able to use GitHub
Enterprise as well. I get to work with great people who are way smarter than I
am so I’m always learning new ways to be better.</p>
<p>I’ve also learned how important it is to work at a place with great people.
With great people working with you, it makes all the difference in the world.
Learning flows much more easily and work becomes much more enjoyable when
you’re around people as motivated as you are. It also makes learning so much
fun when you have so many thing to learn from everyone you work with instead
of teaching everyone else what you know.</p>
<h1 id="Where_I_See_Myself_Going">Where I See Myself Going</h1><p>Enough looking backwards, what do I see looking forward? Honestly, I don’t
really know for exactly but I do have some general ideas. Mostly I’d really
like to beef up my skills as a developer and focus more on really giving back
to the Open Source community. I’ve done some work with FubuMVC but I want to
do more and make some more diverse contributions to other projects and open
source tools that have made my life better as a developer.</p>
<p>Along with that, I’d love to expand my skills in the areas of business. I know
that just having programming skills is not enough. I need to learn more about
business and how I can help to improve the companies I work for. Code is
really just a small part about what I can do. The more domain knowledge I
have, and the more quickly I can learn that, the better I can make things
valuable to the business and to people using the software I’ve helped write.</p>
<h1 id="What_I’ve_learned">What I’ve learned</h1><p>So far in my career I’ve learned many things and my development skills have
grown tremendously lately. But out of all the things that I’ve done so far in
my career I’ve learned a few key career lessons. First, I always want to work
with great people on interesting and valuable things. Second I love to learn
now things and being in an environment that encourages learning is extremely
important. And finally, the most important thing I’ve learned so far is to be
happy with what I’m doing. If I’m not happy where I am then and it isn’t
changing, then it is time to go where I truly am happy and can make a
difference.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I’m in a bit of a retrospective mood so this post is going to be focusing on
the things I’ve learned so far in software development. And ]]>
    </summary>
    
      <category term="career" scheme="http://smerrell.github.io/tags/career/"/>
    
      <category term="softwaredev" scheme="http://smerrell.github.io/tags/softwaredev/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Giving Sublime Text 2 A Try]]></title>
    <link href="http://smerrell.github.io/2012/11/18/giving-sublime-text-2-a-try/"/>
    <id>http://smerrell.github.io/2012/11/18/giving-sublime-text-2-a-try/</id>
    <published>2012-11-19T03:10:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>Looks like <a href="http://wekeroad.com/" target="_blank" rel="external">Rob Conery</a> got back in the blogging mood and
picked a rather interesting subject. His topic? The holy war prone land of text
editors Though I will say, his title for the post <a href="http://wekeroad.com/2012/11/18/code-editor-thunderdome" target="_blank" rel="external">Code Editor
Thunderdome</a>. is
awesome. Acutally, the blog itself is really a pretty good read with lots of
good information for several editors that are worth checking out.</p>
<p>So why exactly am I writing a post about Sublime Text 2? Well because I thought
it would be something interesting. That and since I’m pretty solidly a Vim user,
I thought it might be time to at least try some other Editors. Well, that and
my boss <a href="http://coreykaylor.com/" target="_blank" rel="external">Corey</a> has been pretty excited about Sublime
for a while now. Excited enough that as a team for our morning learning we
watched a whole bunch of the <a href="http://net.tutsplus.com/articles/news/perfect-workflow-in-sublime-text-free-course/" target="_blank" rel="external">NetTuts Sublime Text
Videos</a>.</p>
<p>With that, I’m going to try and put down my “Meh, unimpressed Vim user is
unimpressed” initial attitude and really give Sublime a try.</p>
<h2 id="The_Good">The Good</h2><p>Sublime definitely is really fast. Startup is super quick, I definitely like
how Sublime starts back up with what I was working on last as well. Even going
so far as having the cursor on the last line that I left off at is pretty nice.
It definitely makes thing easy when you want to close Sublime and start back up
where you left off.</p>
<p>Another feature I’ve come to really like from Sublime is the Cmd-P file
searching being built right in. With Vim I use the ctrl-p plugin which is
great, but it is not something that comes out of the box. It also requires some
fine tuning to use well. Sublime, on the other hand, has surprisingly fast
searching for files. It also has another great feature I haven’t setup for Vim
yet. If you do Cmd-R you can search for methods inside of a project. This is a
really handy feature and comes with support for most of the files I use
regularly. So CSS, Ruby, JavaScript all work as I tested them.</p>
<p>That function there is enough to convince me to give it a try for my JavaScript
heavy projects since I don’t have this feature set up for Vim. Even for the little bit of Ruby I do seems like it will be easier to work with in Sublime.</p>
<h2 id="The_Bad">The Bad</h2><p>One thing I’ve found from using Sublime the last couple days annoying though is
how working the configuration into my current
<a href="https://github.com/smerrell/dotfiles" target="_blank" rel="external">dotfiles</a> setup is going to be
difficult.  Since I’ve spent the last several years working on my dotfiles, I
feel very inclined to add settings for my text editor. Granted, this is a bit
of a minor complaint and it isn’t even something that is impossible, just more
annoying to set up than anything.</p>
<p>Along the lines of me wanting to store Sublime’s configuration in my dotfiles
repo, I also would like to automate as much of that setup for Sublime as
possible. Since I’ve been a bit obsessed with automation lately, I’d love to
have a way to run a script and have sublime configured just the way I like it.
Unfortunately, I’ve run into a stubmling block. <a href="http://wbond.net/sublime_packages/package_control" target="_blank" rel="external">Package
Control</a>, Sublime’s awesome
package manager has to be installed from inside Sublime’s command window.</p>
<h2 id="The_Wat?">The Wat?</h2><p>So far, Sublime has shown itself as a pretty capable editor that I’ve been
enjoing using lately. I’ve shown some good and bad impressions I got from using
it but there is one thing that feels just like a plain
<a href="https://www.destroyallsoftware.com/talks/wat" target="_blank" rel="external">wat</a> moment for me.</p>
<p>The first thing I decided to set up with Sublime after I got Package Control
installed was syntax highlighting for Markdown. Since I’m writing this blog
post using Sublime, I figured it would be useful. When I first installed the
Markdown Syntax highlighting I started Sublime back up using my favorite color
scheme <a href="http://ethanschoonover.com/solarized" target="_blank" rel="external">Solarized</a>. Happily for me
Sublime comes with Solarized already built in, but then I started noticing
something strange.</p>
<p>Using the Solarized scheme, I got very little syntax highlighting when using
Solarized. To figure out what the heck was going on with this, I decided to
flip through every one of the built in color schemes. That was then i realized
each color scheme did the syntax highlighting for Markdown very differently.
Some supported very little things, others had pretty rich syntax highlighting.</p>
<p>To me, that just felt really strange that some color schemes would support
Markdown better than others. I’m sure there is a reasonable explanation for
this, but the first reaction I had to it was WAT?</p>
<h2 id="But_Seriously">But Seriously</h2><p>I’ve only been using Sublime for about a week and it does seem like a pretty
good editor. There are a lot of things that I like when compared to Vim. The
built in snippets and code completion features are pretty nice, as well as its
overall speed. Since I’ve only been using it for about a week I haven’t even had
much time to really dig into Sublime and most of its features. When I first
started with Vim it took me months before I felt like I was really being
productive with it.</p>
<p>So the big question, am I going to start using Sublime as my primary text
editor? I really don’t know. To me, putting my Vim setup together just right
felt a lot like a Jedi building their own lightsaber (nerdy, I know) so I have
to admit I have a strong emotional attachment to Vim. Still though, it doesn’t
mean that other editors don’t have a lot of value to offer so I think I’m going
to try and make more of a conscious effort to get to know Sublime more and see
where things go.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Looks like <a href="http://wekeroad.com/" target="_blank" rel="external">Rob Conery</a> got back in the blogging mood and
picked a rather]]>
    </summary>
    
      <category term="editors" scheme="http://smerrell.github.io/tags/editors/"/>
    
      <category term="sublimetext" scheme="http://smerrell.github.io/tags/sublimetext/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Open Source Changing How We Work]]></title>
    <link href="http://smerrell.github.io/2012/11/16/open-source-changing-work/"/>
    <id>http://smerrell.github.io/2012/11/16/open-source-changing-work/</id>
    <published>2012-11-16T07:30:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>I may have a bit of an obsession with GitHub right now, and no not GitHub the
product, I mean GitHub the company. I’ve posted about how I’ve been inspired by
GitHub’s automation and even got my coworkers to watch <a href="http://zachholman.com/talk/unsucking-your-teams-development-environment" target="_blank" rel="external">Zach Holman’s</a>
video on GitHub’s automation. And just this week we all sat down and watched
<a href="http://tomayko.com/" target="_blank" rel="external">Ryan Tomayko’s</a> video on how GitHub does <a href="http://redmonk.com/tv/2012/10/24/distributed-management-githubs-ryan-tomayko/" target="_blank" rel="external">management</a>
(hint: it’s not like many other companies).</p>
<p>I promise to not dive into fanboy-ism here, I’m really interested in learning
from what GitHub does and how it can apply to other companies. What I do find
interesting is what Ryan Tomayko points out in how GitHub works internally. They
basically function in many of the same ways as open source projects do. At first
it seems a bit strange because of how tied we are to the image of a traditional
business with traditional managers, but once you think about it, it makes a lot
of sense. Open source has really proven itself over the long term and many very
large products work very well this way.  Projects such as the Linux Kernel have
thousands of people involved in the process and it works very well.</p>
<h2 id="No_Managers?">No Managers?</h2><p>Ryan Tomayko points out that GitHub works without managers as we see them in the
traditional sense. Instead having authority over people and telling them what to
do, Ryan explains his position more as a guide. Instead of telling others to
work on a feature, he must convince them through argument.</p>
<p>This really is very like how things work in open source. Since everyone is
volunteering their time working on a project, the only way to really get things
done is to convince others in the community that your idea is worthwhile enough
to work on. Even if natural leaders appear this way, everyone is free to decide
what to work on and when to work on it.</p>
<h2 id="Office_Hours">Office Hours</h2><p>One thing that I’ve seen stressed about GitHub is that they have no fixed hours
at all. By taking the approach much like the open source community, they rely on
the fact that everything should be asynchronous and electronic so everyone can
pick up what is going on at any time. With Open Source this was a necessity
because contributors were all around the world, but taking this into account at
work has many great benefits.</p>
<p>Being a father of three girls, family is a huge part of my life. When you remove
the focus on having office hours, you can remove the tension between family and
work and better allow work and family to integrate without causing stress.</p>
<h2 id="Is_Anyone_Else_Taking_This_Approach?">Is Anyone Else Taking This Approach?</h2><p>I find GitHub’s approach to how they work very interesting, but is anyone else
out there doing something similar? Just earlier this year, I wouldn’t have been
able to tell you, but recently Valve had their <a href="http://newcdn.flamehaus.com/Valve_Handbook_LowRes.pdf" target="_blank" rel="external">new employee handbook</a> leaked. Valve’s
handbook is a really interesting read as it lays out how Valve works. And it
basically is the same way that people at GitHub works, you are free to choose
what and when you work on a project.</p>
<p>In Ryan Tomayko’s video, he actually points out that the reason he did his talk
about GitHub at all was because they finally had validation that another large
and successful company was approaching management in a similar way.</p>
<h2 id="My_Open_Source_Experience">My Open Source Experience</h2><p>So if GitHub operates on many of the same principals of Open Source, then I
actually have a really good idea of how development works there.  Over the time
I’ve been with Extend Health I’ve had opportunities to work with the
<a href="http://fubu-project.org/" target="_blank" rel="external">FubuMVC</a> open source project and see this first hand.</p>
<p>When I was working on helping improve documentation to really get things done I
had to try and work to get other members of the community to help and contribute
documentation. Since I can’t write everything myself and even if I could I sure
wouldn’t want to do it myself.</p>
<h2 id="That’s_Great_and_All_but_We’re_Not_GitHub">That’s Great and All but We’re Not GitHub</h2><p>The first thing that went through my head about how GitHub works was “That’s
great and all, but we’re not GitHub. There is no way we could ever do what
they’re doing”. And after our team got done watching the video, I heard
basically the same thing from others as well. At first I was really discouraged
that I got all exited seeing two companies I really find exemplary doing new and
interesting things and then suddenly realizing that would never work where I am
now.</p>
<p>Then I got to thinking about it more and realized that it is ok that we can’t
just change everything to be like GitHub. Every organization is different and
things work differently for each group. This didn’t mean that we couldn’t learn
from how GitHub and VALVe work and improve what we are doing ourselves. This
leads to the thought what sorts of things could a more traditional company do to
get benefit of the open source style approach? Well, I don’t really know
everything but here are a couple Ideas I could come up with.</p>
<p><strong>Open code discussions</strong></p>
<p>If you want your code reviews think about moving the conversation online instead
of just in person with another developer. GitHub pull requests work perfectly
for this, and you open your code up to a broader audience. With more people
looking at your code, you really open things up to some great feedback.</p>
<p><strong>Record everything</strong></p>
<p>Moving conversations online allows us to have a linkable, and documented place
to make decisions and have discussions at any time and come back to it later. It
makes it easier for new people to get up to speed if they can go back and look
at posts, or mailing lists and see what the group spoke about and decided. One
of the main tools for this in Open Source is the mailing list. GitHub uses
37signal’s Campfire. I really don’t know what tools work best, but just looking
for something that make conversations accessible is a great start.</p>
<p><strong>Be more willing to share</strong></p>
<p>Much of what makes open source fun is that everyone is willing to share their
code, stories, and advice with each other. Make it easy for people to
collaborate with each other and learn new things. Devs should be more
comfortable to share and work with design and vice versa. Just finding ways to
help improve communications amongst everyone could be a big help here.</p>
<h2 id="Fin-">Fin.</h2><p>So there we have it. I’ve tried to convey some of the thoughts I’ve had in my
head the last couple weeks about how both GitHub and Valve work. There really is
a lot to take in and a lot more to learn but I’ll leave it at this. I’d love to
hear feedback, thoughts, comments about these things as I find them very
interesting.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I may have a bit of an obsession with GitHub right now, and no not GitHub the
product, I mean GitHub the company. I’ve posted about how I]]>
    </summary>
    
      <category term="opensource" scheme="http://smerrell.github.io/tags/opensource/"/>
    
      <category term="random" scheme="http://smerrell.github.io/tags/random/"/>
    
      <category term="thoughts" scheme="http://smerrell.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows to OS X: BetterTouchTool]]></title>
    <link href="http://smerrell.github.io/2012/11/10/windows-to-os-x-better-touch-tool/"/>
    <id>http://smerrell.github.io/2012/11/10/windows-to-os-x-better-touch-tool/</id>
    <published>2012-11-10T19:13:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>Not too long ago I finally got myself a new laptop, and this time I decided to
get the 15” MacBook Pro Retina. I’ve been using Windows 7 primarily the last
couple years since my work laptop has been the only machine I have had. Previous
to that I had been using Linux (Ubuntu specifically) for a couple years.</p>
<p>While I have nothing really against Windows, it really isn’t my preferred
operating system for anything other than games (and even that is changing with
Valve supporting OS X and Linux now). But I have gotten used to a few Windows 7
features that OS X doesn’t support.</p>
<p><strong>Aero Snap</strong></p>
<p>By far the biggest thing I miss in OS X from Windows 7 is Aero Snap. I really
got used to managing my applications this way. Since I’m a developer I often
times want to have a couple terminal windows or log files open side by side. It
was really handy to be able to just type <code>Win-Left</code> and snap the log viewer to
half the screen and then do <code>Win-Right</code> to snap the other log to the right half.
That along with <code>Win-Up</code> maximizing my screen are easily my most commonly used
Windows shortcuts.</p>
<p><strong>Better Touch Tool</strong></p>
<p>Fortunately I stumbled on <a href="http://www.boastr.de/" target="_blank" rel="external">BetterTouchTool</a> which has
really proven handy. Basically BetterTouchTool allows you to get many of the
Aero Snap features but by completely customizing how you want it to work. The
other thing I really find interesting is that it doesn’t completely copy Aero
Snap so it isn’t just a <code>cmd-left</code> or <code>cmd-right</code> to do the windowing. Instead
it relies on one of my favorite OS X features, multi-touch gestures.</p>
<p>BetterTouchTool starts out with a completely blank slate so you’ll have to
install it and set it up yourself. While I like the fully customizable nature, I
think it actually would have been a good idea for them to have provided at least
a couple smart defaults to start you out with. So for me, I’ve come up with
these conventions to get a similar experience to Aero Snap.</p>
<p>For me, I just have the basics configured right now. These are the settings I
have to give me a similar experience to Aero Snap:</p>
<p><img src="/assets/images/bettertouchtool-cfg.jpg" alt="My BetterTouchTool Configuration" title="My configuration"></p>
<p>Pretty simple, but you can see some other interesting things that you can do
with BetterTouchTool. You can customize gestures per input type so the Magic
Mouse, Track Pad, Keyboard, mouse or Apple Remote all have their own
customizations. What you don’t see in this picture is that you can even
configure custom gestures per applications. So you could even have gestures for
things you do in Finder or Safari or whatever application you like.</p>
<p>There really is a whole lot that can be done with BetterTouchTool as it is
extremely configurable and has tons of gestures and supported actions. I’ve just
barely touched the surface with this tool so if you’re looking for something
similar I’d definitely recommend you give it a try.</p>
<p><em>Side note</em></p>
<p>While researching tools to give me a similar experience to Aero Snap I used this
<a href="http://apple.stackexchange.com/questions/9659/what-window-management-options-exist-for-os-x" target="_blank" rel="external">Apple StackExchange post</a>.
As you can see there are a ton of good options but I’ve decided to try out
BetterTouchTool. If you have tried any of these others let me know! I’d love to
hear experiences with these tools or BetterTouchTool itself.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Not too long ago I finally got myself a new laptop, and this time I decided to
get the 15” MacBook Pro Retina. I’ve been using Windows 7 ]]>
    </summary>
    
      <category term="OSX" scheme="http://smerrell.github.io/tags/OSX/"/>
    
      <category term="Tools" scheme="http://smerrell.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Automate project suckage away]]></title>
    <link href="http://smerrell.github.io/2012/11/02/automate-project-suckage-away/"/>
    <id>http://smerrell.github.io/2012/11/02/automate-project-suckage-away/</id>
    <published>2012-11-02T22:23:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>How much tedious work is involved in setting up and developing individual
projects at your work? In my <a href="/blog/2012/10/19/chocolatey-machine-setup">first post</a>
I wrote about how much tedious work is involved in setting up a new machine, now
let’s dig a little deeper to the project level.</p>
<p>Automation at the project level is very much in line with Zach Holman’s talk on
automating machine setup. In his talk he mentions that each project has it’s own
setup scripts to get things up and running quickly. While working on a project
at work, I’ve come to realize how important automation is inside of individual
projects as well. Automating processes inside a project can help in many ways.
First, it makes us developers happy. We no longer have to keep doing the same
boring thing over and over, and second it means the tedious task is done
consistently and without error instead of by an error-prone manual process.</p>
<p><strong>Windows Workflow Foundation…</strong></p>
<p>The project at work that my team and I have been working on is called the IVR.
It is the first thing a retiree interacts with when they call into our call
center. Unfortunately the project for the IVR uses Windows Workflow Foundation
which is… terrible to work with. Since it is a Microsoft product, the decision
was to make the configuration and designing of the workflow using a GUI.
Through that GUI the workflows are generated in a relatively unflattering XML
representation. These are the .xoml files and the xoml rules files.</p>
<p>To allow for dynamically changing how the call flow works, we’ve loaded the xoml
files and the grammars into the database. The xoml files control the overall
flow of someone calling in and the grammars are used to recognize phrases or
dial tones the person calling in says or dials (i.e. Say foo to go to bar or
press 1). This works well for us having these files loaded into the database
since we get a lot of flexibility in changing the IVR without redeploying.
Unfortunately for us, Windows Workflow Foundation’s editor of the xoml files
screws them up if you open them. The problem is in declaring what assembly the
worfklows use. It adds a specific version of the assemblies for the xoml files
and doesn’t fully declare the right namespace for the rules file.</p>
<p>This makes it extremely tedious to modify any of our workflows because you have
one of two options. Either you just don’t use the editor and modify the xml
directly or you deal with the changes the editor makes and you go back and fix
it later. Either way really sucks since it involves so much tedious work.
Fortunately for us, my coworker <a href="http://paceyourself.net" target="_blank" rel="external">Bob</a> got tired of
fixing the files over and over by hand.</p>
<p><strong>Rake to the rescue</strong></p>
<p>What Bob did was to make a couple rake tasks that go through every xoml file and
rule file and uses a regex to remove the specific assembly versions, and add the
missing declarations from the rule files. This has saved us so much time and
headache from deploying the new changes and having it crash because it was
looking for a specific assembly version.</p>
<p>Not only that, but he added a rake task to add the new xoml and rule file
declarations into a sql script so we can easily run the script and insert it
into the database saving us even more time. The great thing about this is that
it has saved us a significant amount of time and greatly reduced our frustration
with the project.</p>
<p><strong>Automation FTW</strong></p>
<p>Even just these little bits of automation have significantly improved the ease
of working on the project. We’ve already talked about next steps on making
things even easier to use. The biggest improvement being a way to automatically
deploy the sql scripts we’ve generated and deploy the dlls to our dev server.
This experience has really shown me how much nicer development can be with
seemingly simple automation tasks to reduce the tedious, manual work that can be
involved with some projects.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>How much tedious work is involved in setting up and developing individual
projects at your work? In my <a href="/blog/2012/10/19/chocolat]]>
    </summary>
    
      <category term="automation" scheme="http://smerrell.github.io/tags/automation/"/>
    
      <category term="dev-setup" scheme="http://smerrell.github.io/tags/dev-setup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shell Scripting and Git Fun]]></title>
    <link href="http://smerrell.github.io/2012/10/26/shell-scripting-and-git-fun/"/>
    <id>http://smerrell.github.io/2012/10/26/shell-scripting-and-git-fun/</id>
    <published>2012-10-26T22:48:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>This afternoon I got the urge to whip up a quick script to help me when using
git and a GitHub hosted repository. Quite often I want to look at the GitHub
page of a project I’m working on when I’m sitting on the command line in the
repository. So I figured, how could I go about making it easier to open that URL
without having to find the link in Chrome or on GitHub’s site. Shell scriping to
the rescue!</p>
<p>I realized with a little bit of text manipulation, I could get the <code>git remote
show</code> command to help me out. So I took the output</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: git@github.com:smerrell/dotfiles.git</span><br><span class="line">  Push  URL: git@github.com:smerrell/dotfiles.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    gh-pages tracked</span><br><span class="line">    master   tracked</span><br><span class="line">  Local branch configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</span><br><span class="line">    master merges with remote master</span><br><span class="line">  Local ref configured <span class="keyword">for</span> <span class="string">'git push'</span>:</span><br></pre></td></tr></table></figure>
<p>And grepped it on Fetch URL leaving me with <code>Fetch URL:
git@github.com:smerrell/dotfiles.git</code>. From there I cut the first 14 characters
using <code>cut -c 14-</code> leaving me with just the git url I was looking for. With just
the URL left, I got working on crafting a Sed command to manipulate the URL to
what I needed, coming up with this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -r <span class="operator">-e</span> <span class="string">'s/\w+@/http:\/\//'</span> <span class="operator">-e</span> <span class="string">'s/\.git$//'</span></span><br><span class="line"><span class="operator">-e</span> <span class="string">'s/\.com:/.com\//'</span> <span class="operator">-e</span><span class="string">'s/git:/http:/'</span></span><br></pre></td></tr></table></figure>
<p>This command just replaces the <em>git@</em> part with <em>http</em> instead, I then stripped
off the <em>.git</em> and <em>.com:</em> with <em>.com/</em>. producing the desired
<code>http://github.com/smerrell/dotfiles</code>. Awesome!</p>
<p>Once I had the URL I wanted, it became pretty simple to open up the url using my
default browser. I simply call <code>start</code> and gave it the url.</p>
<p><strong>OSX Support</strong></p>
<p>After getting this all working on my Windows box at work, I had to see if this
would work on OS X. Being confident in my skills I just copied the file over to
my Mac, dropped it in the bin and happily tried to run it… Until it blew up on
me.</p>
<p>First, I had to remember that on Windows you use <code>start</code> but on OS X you need to
use <code>open</code>. That was easy enough though, I just added a quick check to see if
I’m on OS X or Windows and set a variable <code>opencmd</code> to the right thing. But then
the painful part hit me.</p>
<p>This is when I learned the painful difference between Gnu-based tools and BSD
tools. Sed was very unhappy with the parameters I was trying to pass into it.
Specifically the -r parameter. The script above uses extended regex to get the
special characters of <code>\w</code> and <code>+</code>. Unfortunately BSD Sed uses the <code>-E</code> flag while Gnu
Sed uses the <code>-r</code> flag.</p>
<p>Fortunately this is pretty easy to work around as I store the extendedRegex flag
in my script and set it depending on the OS I’m on.</p>
<p>The most annoying difference between Gnu Sed and BSD sed though, is the support
of Regular Expression Metacharacters. In BSD sed, you do not get the
metacharacters, so <code>\w</code> must become <code>[[:space:]]</code>. So now I know a painful
difference between Gnu Sed regex extensions and BSD regex extensions. After I
replaced the metacharacters I was using with their full version, I ran the
script again and it worked! So I now have an easy way to open a GitHub repo from
the command line.</p>
<p>I still have many imrovements I could make to this script, but I’m pretty happy
with how it turned out after putting about a half hour of work into it. Below is
the file in its entirety and you can find it on
<a href="https://github.com/smerrell/dotfiles/blob/master/bin/view-remote" target="_blank" rel="external">GitHub</a> as
well. Feel free to borrow the script and use it if you find it useful. I’d love
to get some feedback on ways to improve what I have so far.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This afternoon I got the urge to whip up a quick script to help me when using
git and a GitHub hosted repository. Quite often I want to l]]>
    </summary>
    
      <category term="bash" scheme="http://smerrell.github.io/tags/bash/"/>
    
      <category term="git" scheme="http://smerrell.github.io/tags/git/"/>
    
      <category term="shell-scripting" scheme="http://smerrell.github.io/tags/shell-scripting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chocolatey machine setup]]></title>
    <link href="http://smerrell.github.io/2012/10/19/chocolatey-machine-setup/"/>
    <id>http://smerrell.github.io/2012/10/19/chocolatey-machine-setup/</id>
    <published>2012-10-20T04:42:00.000Z</published>
    <updated>2015-12-24T00:44:26.000Z</updated>
    <content type="html"><![CDATA[<p>How well automated is your machine setup process? After watching Zach Holman’s
excellent video <a href="http://zachholman.com/talk/unsucking-your-teams-development-environment" target="_blank" rel="external">Unsucking Your Teams Development Environment</a>
I got to thinking about the setup process we have at Extend Health (who is
hiring, come work with us!). While we’ve always talked about smoothing out the process of setting
up a new machine, we’ve never actually gotten around to it. That is, until now.</p>
<p>For GitHub, they use what they call <a href="https://speakerdeck.com/u/wfarr/p/the-setup-managing-an-army-of-laptops-with-puppet" target="_blank" rel="external">The Setup</a>
which is a Ruby script that uses Puppet to manage all their machines. When I had
first looked at Puppet a couple years ago, Windows support was not an option. It
appears that this has changed. While we investigate using Puppet, my friend Kyle
and I have begun setting up a system that uses <a href="http://chocolatey.org" target="_blank" rel="external">Chocolatey</a> and
straight PowerShell to set up our Windows boxes.</p>
<p>So what exactly is Chocolatey? Chocolatey is a package manager designed for
Windows and is modeled somewhat like apt-get for Linux. Essentially it uses the
NuGet infrastructure to deliver software such as Vim or Skype. This makes
Chocolatey an attractive option because like NuGet, you can host your own feed
of software that can be installed on your machine.</p>
<p>Once we decided we’d go with Chocolatey we needed to set up a test base. So we
got ourselves set up with a vanilla Windows 7 VM. This works great since we can
play around with setting up a brand new Windows install and then restore when we
want to try it again. This also helped expose one of our first problems in
setting up a new machine. Chocolatey requires .NET 4.0 to be installed before it
will work.</p>
<p>While I’m admittedly not the biggest fan of PowerShell, when it comes to
scripting Windows to do what you want, it can definitely come in handy. <a href="http://kyzog.wordpress.com/" target="_blank" rel="external">Kyle</a>
came across a very handy PowerShell module called <a href="http://gallery.technet.microsoft.com/scriptcenter/2d191bcd-3308-4edd-9de2-88dff796b0bc" target="_blank" rel="external">PSWindowsUpdate</a>.
Once we got that script working and how to continue our script using elevated
permissions we were off. Here’s the line we got directly from the PSWindows
update example.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-WUInstall -ServiceID <span class="number">9482</span>f4b4-e343-<span class="number">43</span>b6-b170-<span class="number">9</span>a65bc822c77 -Title <span class="string">".NET Framework 4"</span> -AcceptAll</span><br></pre></td></tr></table></figure>
<p>The last thing we were able to do this Friday was get PSWindows update to
install .NET 4.0 and Chocolatey! Exciting news for us because now we should be
able to take a brand new machine and install everything we need to write code at
Work.</p>
<p>So where do we take it from here? We’ve got many plans for our own setup script
but the first step is to make the initial setup from a new machine to getting
the right software installed. We’ve gotten .NET 4.0 out of the way but now we
need to see what other snags we may run into. We also need to see how we can get
Visual Studio 2010 and SQL Server 2012 installed. From there we’d also like to
start making profiles so QA and our DB teams can also plug into what we’re
building.</p>
<p>Longer term, we’d also like to keep investigating what Puppet may be able to
provide and start trying out options there, but for now this is a great step
forward in automating the suck out of our setup process.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>How well automated is your machine setup process? After watching Zach Holman’s
excellent video <a href="http://zachholman.com/talk/unsuck]]>
    </summary>
    
      <category term="automation" scheme="http://smerrell.github.io/tags/automation/"/>
    
      <category term="dev-setup" scheme="http://smerrell.github.io/tags/dev-setup/"/>
    
  </entry>
  
</feed>
